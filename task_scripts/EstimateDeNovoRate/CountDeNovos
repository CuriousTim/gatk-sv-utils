#!/usr/bin/env bash

# EstimateDeNovoRate.CountDeNovos
# Count de novo events.
#
# Args: <genotypes> <trios> <output_db>

set -o errexit
set -o nounset
set -o pipefail

genotypes="$1"
trios="$2"
output_db="$3"

# Need to create a temp directory instead of a file because DuckDB will fail if
# given an existing file that is not a DuckDB database, even if the file is
# empty.
tmpdir="$(mktemp -d -p "${PWD}" tmp_XXXXXXXXX)"
genotypes_db="${tmpdir}/genotypes.duckdb"
trap 'rm -rf "${tmpdir}"' EXIT

duckdb -bail -echo "${genotypes_db}" <<EOF
  PRAGMA disable_progress_bar;
  CREATE TYPE svclass AS ENUM ('DEL', 'DUP', 'INS', 'INV', 'CPX', 'CTX', 'CNV', 'BND');
  CREATE TABLE genotypes (
    sid VARCHAR,
    vid VARCHAR,
    svtype svclass,
    svlen INTEGER,
    gt UTINYINT,
    gq UTINYINT,
  );
  COPY genotypes FROM '${genotypes}' (DELIM '\t', NULLSTR 'NA');
EOF

duckdb -bail -echo "${output_db}" <<EOF
  PRAGMA disable_progress_bar;
  CREATE TYPE svclass AS ENUM ('DEL', 'DUP', 'INS', 'INV', 'CPX', 'CTX', 'CNV', 'BND');
  CREATE TABLE trios (
    offspring VARCHAR,
    father VARCHAR,
    mother VARCHAR
  );
  COPY trios FROM '${trios}' (DELIM '\t', HEADER false);

  CREATE TABLE inheritance (
    offspring VARCHAR,
    father VARCHAR,
    mother VARCHAR,
    vid VARCHAR,
    svtype svclass,
    svlen INTEGER,
    of_gt UTINYINT,
    of_gq UTINYINT,
    fa_gt UTINYINT,
    fa_gq UTINYINT,
    mo_gt UTINYINT,
    mo_gq UTINYINT
  );
  ATTACH '${genotypes_db}' AS gts_db;
  INSERT INTO inheritance BY NAME
  SELECT l.offspring, l.father, l.mother, r.vid, r.svtype, r.svlen, r.gt AS of_gt, r.gq AS of_gq
  FROM trios l
  JOIN (SELECT sid, vid, svtype, svlen, gt, gq FROM gts_db.genotypes WHERE gt > 0) r
  ON (l.offspring = r.sid);

  UPDATE inheritance l
  SET fa_gt = r.gt, fa_gq = r.gq
  FROM gts_db.genotypes r
  WHERE l.father = r.sid AND l.vid = r.vid;

  UPDATE inheritance l
  SET mo_gt = r.gt, mo_gq = r.gq
  FROM gts_db.genotypes r
  WHERE l.mother = r.sid AND l.vid = r.vid;

  CREATE TABLE denovo_counts AS
  SELECT
    offspring,
    svtype,
    count() AS svs,
    count() FILTER (of_gt = 1) AS het_svs,
    count() FILTER (of_gt = 1 AND fa_gt = 0 AND mo_gt = 0) AS dn,
    count() FILTER (of_gt = 1 AND (fa_gt = 0 OR fa_gt IS NULL) AND (mo_gt = 0 OR mo_gt IS NULL)) AS het_false_dn,
    count() FILTER (of_gt > 0 AND (fa_gt = 0 OR fa_gt IS NULL) AND (mo_gt = 0 OR mo_gt IS NULL)) AS any_false_dn
  FROM inheritance
  GROUP BY offspring, svtype;
EOF
