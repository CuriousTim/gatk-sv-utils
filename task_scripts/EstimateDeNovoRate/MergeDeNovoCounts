#!/usr/bin/env bash

# EstimateDeNovoRate.MergeDeNovoCounts
# Merge de novo counts from scattered databases.
#
# Args: <dbs_list> <merged_counts_output> <dbs_tar_output>

set -o errexit
set -o nounset
set -o pipefail

dbs_list="$1"
merged_counts="$2"
dbs_tar="$3"

dbs_tar_dir="${dbs_tar%.tar}"
mkdir "${dbs_tar_dir}"

sql_cmds="$(mktemp -p "${PWD}" tmp_XXXXXXXXX)"
tmp_merge="$(mktemp -p "${PWD}" tmp_XXXXXXXXX)"
trap 'rm -rf "${sql_cmds}" "${tmp_merge}" "${dbs_tar_dir}"' EXIT

# TODO merge inheritance tables.
declare -i i=0
while read -r f; do
  dest="${dbs_tar_dir}/counts_db-$(printf '%02d' "${i}").duckdb"
  ln -s "${f}" "${dest}"
  printf "ATTACH '%s' AS db_%d;\n" "${dest}" "${i}" >> "${sql_cmds}"
  (( ++i ))
done < "${dbs_list}"

declare -i j=0
cat >> "${sql_cmds}" <<EOF
COPY (
SELECT
  offspring,
  svtype,
  sum(svs) AS svs,
  sum(het_svs) AS het_svs,
  sum(dn) AS dn,
  sum(het_false_dn) AS het_false_dn,
  sum(any_false_dn) AS any_false_dn
  FROM (
EOF
for (( j=0; j<i - 1; ++j )); do
  printf 'SELECT * FROM db_%d.denovo_counts UNION ALL\n' "${j}" >> "${sql_cmds}"
done
printf 'SELECT * FROM db_%d.denovo_counts)\n' "${j}" >> "${sql_cmds}"

cat >> "${sql_cmds}" <<EOF
GROUP BY offspring, svtype)
TO '${tmp_merge}' (DELIM '\t', HEADER true, FORMAT 'CSV', COMPRESSION 'gzip');
EOF

duckdb -bail -echo < "${sql_cmds}"
mv "${tmp_merge}" "${merged_counts}"

tar -cf "${dbs_tar}" "${dbs_tar_dir}"
